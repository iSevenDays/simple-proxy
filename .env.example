# Claude Code Proxy Model Configuration
# 
# Configure which models and endpoints to use for Claude Code requests.
# Copy this file to .env and customize as needed.
# 
# ALL MODELS AND ENDPOINTS ARE REQUIRED - no fallbacks when .env exists
# 
# MULTI-ENDPOINT SUPPORT: Endpoints support comma-separated lists for failover
# Examples: http://192.168.0.46:11434/v1/chat/completions,http://192.168.0.50:11434/v1/chat/completions
# The proxy will round-robin between endpoints and failover on errors

# BIG_MODEL: Used for Claude Sonnet requests (high-capability tasks)
BIG_MODEL=your-big-model-name
BIG_MODEL_ENDPOINT=http://192.168.0.24:8080/v1/chat/completions,http://192.168.0.50:8080/v1/chat/completions
BIG_MODEL_API_KEY=sk-your-api-key

# SMALL_MODEL: Used for Claude Haiku requests (fast, lightweight tasks)  
SMALL_MODEL=qwen2.5-coder:latest
SMALL_MODEL_ENDPOINT=http://192.168.0.46:11434/v1/chat/completions,http://192.168.0.50:11434/v1/chat/completions
SMALL_MODEL_API_KEY=ollama

# CORRECTION_MODEL: Used for tool call correction service
CORRECTION_MODEL=qwen2.5-coder:latest
TOOL_CORRECTION_ENDPOINT=http://192.168.0.46:11434/v1/chat/completions,http://192.168.0.50:11434/v1/chat/completions
TOOL_CORRECTION_API_KEY=ollama

# SKIP_TOOLS: Comma-separated list of tool names to skip/filter out (optional)
# Example: SKIP_TOOLS=NotebookRead,NotebookEdit,SomeOtherTool
SKIP_TOOLS=NotebookRead,NotebookEdit

# HANDLE_EMPTY_TOOL_RESULTS: Replace empty tool results with descriptive messages (optional)
# Set to "true" or "1" to enable (recommended), "false" or "0" to disable
HANDLE_EMPTY_TOOL_RESULTS=true

# HANDLE_EMPTY_USER_MESSAGES: Replace empty user messages with placeholder content (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: false)
HANDLE_EMPTY_USER_MESSAGES=false

# PRINT_SYSTEM_MESSAGE: Print system messages to logs for debugging (optional)
# Set to "true" or "1" to enable, anything else (or omit) to disable
PRINT_SYSTEM_MESSAGE=false

# PRINT_TOOL_SCHEMAS: Print tool schemas from Claude Code requests for debugging (optional)
# Set to "true" or "1" to enable, anything else (or omit) to disable
# Useful for debugging tool schema mismatches between Claude Code and Simple Proxy
PRINT_TOOL_SCHEMAS=false

# CONVERSATION_LOGGING_ENABLED: Enable full conversation logging to files (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: false)
# Creates detailed logs of all requests, responses, tool calls, and corrections
CONVERSATION_LOGGING_ENABLED=false

# CONVERSATION_LOG_LEVEL: Log level for conversation logs (optional)
# Valid values: DEBUG, INFO, WARN, ERROR (default: INFO)
# Controls the verbosity of conversation logging
CONVERSATION_LOG_LEVEL=INFO

# CONVERSATION_MASK_SENSITIVE: Mask sensitive data in conversation logs (optional)
# Set to "true" or "1" to enable (default), "false" or "0" to disable
# Protects API keys and other sensitive information in log files
CONVERSATION_MASK_SENSITIVE=true

# ENABLE_TOOL_CHOICE_CORRECTION: Enable tool choice correction and necessity detection (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: false)
# Uses hybrid classifier to detect when tools are actually needed in responses
ENABLE_TOOL_CHOICE_CORRECTION=false

# =============================================================================
# HARMONY MESSAGE FORMAT SUPPORT
# =============================================================================
# Configuration for OpenAI Harmony format parsing in Claude Code responses
# These settings control how the proxy handles thinking content and channel classification
#
# The Harmony format uses structured tokens to separate different types of content:
# - <|channel|>analysis: Internal thinking and reasoning (appears in thinking panels)
# - <|channel|>final: User-facing responses (appears in main response)
# - <|channel|>commentary: Tool calls and processing notes (appears as tool metadata)
#
# Example Harmony format:
# <|start|>assistant<|channel|>analysis<|message|>I need to analyze this request...<|end|>
# <|start|>assistant<|channel|>final<|message|>Here's my response to your question.<|end|>

# HARMONY_PARSING_ENABLED: Enable Harmony format detection and parsing (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: true)
# When enabled, proxy will detect and transform Harmony format messages containing
# thinking content (<|channel|>analysis) and final responses (<|channel|>final)
# 
# IMPORTANT: Required for models like gpt-oss-120b that use Harmony format exclusively
# Without this, thinking content appears as regular text in the main response
HARMONY_PARSING_ENABLED=true

# HARMONY_DEBUG: Enable detailed debug logging for Harmony parsing (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: false)
# Provides detailed logs of token recognition, channel classification, and parsing decisions
# Useful for debugging Harmony format issues or understanding parsing behavior
# 
# Debug log examples when enabled:
# - "üîç Harmony tokens detected, performing full extraction"
# - "üéµ Building Harmony response with 2 channels"
# - "üéµ Harmony response built: 3 content items, thinking=true (5.2ms)"
HARMONY_DEBUG=false

# HARMONY_STRICT_MODE: Control error handling behavior for malformed Harmony content (optional)
# Set to "true" or "1" for strict mode, "false" or "0" for graceful mode (default: false)
# 
# Strict mode: Parsing errors cause request failures with detailed error messages
# Graceful mode: Malformed Harmony content falls back to standard processing
# 
# Recommended: false for production (graceful), true for development/debugging
# In graceful mode, the proxy will extract what it can and log warnings for issues
HARMONY_STRICT_MODE=false

# HARMONY_PERFORMANCE_OPTIMIZATION: Enable performance optimizations (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: true)
# Enables various performance optimizations including:
# - Compiled regex pattern caching
# - Memory pooling for channel structures
# - Early content size filtering
# - String allocation minimization
# 
# Performance characteristics with optimization enabled:
# - 1KB content: <1ms parse time
# - 10KB content: 2-5ms parse time
# - 100KB content: 8-12ms parse time
HARMONY_PERFORMANCE_OPTIMIZATION=true

# HARMONY_MAX_CONTENT_SIZE: Maximum content size for Harmony parsing (optional, bytes)
# Default: 1048576 (1MB). Content larger than this will be truncated before parsing
# Helps prevent performance issues with extremely large responses
# Set to 0 to disable size limiting (not recommended for production)
HARMONY_MAX_CONTENT_SIZE=1048576

# HARMONY_CACHE_ENABLED: Enable parsing result caching (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: false)
# Caches parsed results based on content hash to improve performance for repeated content
# Useful for development/testing environments with repeated requests
# Memory usage: approximately 1MB per 1000 cached parsing results
HARMONY_CACHE_ENABLED=false

# HARMONY_CACHE_SIZE: Maximum number of parsing results to cache (optional)
# Default: 1000. Only used when HARMONY_CACHE_ENABLED=true
# Adjust based on available memory and expected usage patterns
HARMONY_CACHE_SIZE=1000

# HARMONY_TOKEN_VALIDATION: Enable strict token validation (optional)
# Set to "true" or "1" to enable, "false" or "0" to disable (default: true)
# Validates Harmony token structure and logs detailed validation errors
# Useful for debugging malformed content from models
# 
# Validation checks include:
# - Proper token sequence (start, channel, message, end)
# - Valid role specifications (assistant, user, system, etc.)
# - Complete token pairs (no orphaned start/end tokens)
# - Content length validation within tokens
HARMONY_TOKEN_VALIDATION=true

# =============================================================================
# HARMONY CONFIGURATION EXAMPLES BY USE CASE
# =============================================================================

# DEVELOPMENT ENVIRONMENT (maximum debugging)
# HARMONY_PARSING_ENABLED=true
# HARMONY_DEBUG=true
# HARMONY_STRICT_MODE=true
# HARMONY_TOKEN_VALIDATION=true
# HARMONY_CACHE_ENABLED=true
# LOG_LEVEL=debug

# PRODUCTION ENVIRONMENT (performance optimized)
# HARMONY_PARSING_ENABLED=true
# HARMONY_DEBUG=false
# HARMONY_STRICT_MODE=false
# HARMONY_PERFORMANCE_OPTIMIZATION=true
# HARMONY_MAX_CONTENT_SIZE=524288
# HARMONY_TOKEN_VALIDATION=false

# TESTING/QA ENVIRONMENT (balanced debugging and performance)
# HARMONY_PARSING_ENABLED=true
# HARMONY_DEBUG=true
# HARMONY_STRICT_MODE=false
# HARMONY_TOKEN_VALIDATION=true
# HARMONY_CACHE_ENABLED=true

# DISABLED HARMONY (fallback configuration)
# HARMONY_PARSING_ENABLED=false
# HARMONY_DEBUG=false
# HARMONY_STRICT_MODE=false

# Examples of other configurations:
# BIG_MODEL=kimi-k2
# BIG_MODEL_ENDPOINT=http://localhost:8080/v1/chat/completions
# BIG_MODEL_API_KEY=sk-your-kimi-key
# SMALL_MODEL=llama-3.1-8b-instruct
# SMALL_MODEL_ENDPOINT=http://localhost:11434/v1/chat/completions
# SMALL_MODEL_API_KEY=ollama
# CORRECTION_MODEL=llama-3.1-8b-instruct