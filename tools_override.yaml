# Tool Description Overrides Configuration
# This file allows customization of tool descriptions sent to backend models
# Format: toolName: "description text"

toolDescriptions:
  Bash: |
    Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.

    Before executing the command, please follow these steps:

    1. Directory Verification:
     - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location
     - For example, before running "mkdir foo/bar", first use LS to check that "foo" exists and is the intended parent directory

    2. Command Execution:
     - Always quote file paths that contain spaces with double quotes (e.g., cd "path with spaces/file.txt")
     - Examples of proper quoting:
     - cd "/Users/name/My Documents" (correct)
     - cd /Users/name/My Documents (incorrect - will fail)
     - python "/path/with spaces/script.py" (correct)
     - python /path/with spaces/script.py (incorrect - will fail)
     - After ensuring proper quoting, execute the command.
     - Capture the output of the command.

    Usage notes:
     - The command argument is required.
     - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).
     - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.
     - If the output exceeds 30000 characters, output will be truncated before being returned to you.
     - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.
     - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.
     - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).
     - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.
     <good-example>
     pytest /foo/bar/tests
     </good-example>
     <bad-example>
     cd /foo/bar && pytest tests
     </bad-example>



    # Committing changes with git

    When the user asks you to create a new git commit, follow these steps carefully:

    1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:
     - Run a git status command to see all untracked files.
     - Run a git diff command to see both staged and unstaged changes that will be committed.
     - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.
    2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:
     - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. "add" means a wholly new feature, "update" means an enhancement to an existing feature, "fix" means a bug fix, etc.).
     - Check for any sensitive information that shouldn't be committed
     - Draft a concise (1-2 sentences) commit message that focuses on the "why" rather than the "what"
     - Ensure it accurately reflects the changes and their purpose
    3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:
     - Add relevant untracked files to the staging area.
     - Run git status to make sure the commit succeeded.
    4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.

    Important notes:
    - NEVER update the git config
    - NEVER run additional commands to read or explore code, besides git bash commands
    - NEVER use the TodoWrite or Task tools
    - DO NOT push to the remote repository unless the user explicitly asks you to do so
    - IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.
    - If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit
    - In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:
    <example>
    git commit -m "$(cat <<'EOF'
     Commit message here.
     EOF
     )"
    </example>

  Task: |
    Launch a new agent to handle complex, multi-step tasks autonomously.
    
    Available agent types and the tools they have access to:
    - general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)
    
    When using the Task tool, you must specify a subagent_type parameter to select which agent type to use.
    
    When to use the Agent tool:
    - When you are instructed to execute custom slash commands. Use the Agent tool with the slash command invocation as the entire prompt. The slash command can take arguments. For example: Task(description="Check the file", prompt="/check-file path/to/file.py")
    
    When NOT to use the Agent tool:
    - If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly
    - If you are searching for a specific class definition like "class Foo", use the Glob tool instead, to find the match more quickly
    - If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly
    - Other tasks that are not related to the agent descriptions above
    
    Usage notes:
    1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses
    2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.
    3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.
    4. The agent's outputs should generally be trusted
    5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent
    6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.
    
    Example usage:
    
    <example_agent_descriptions>
    "code-reviewer": use this agent after you are done writing a significant piece of code
    "greeting-responder": use this agent when to respond to user greetings with a friendly joke
    </example_agent_description>
    
    <example>
    user: "Please write a function that checks if a number is prime"
    assistant: Sure let me write a function that checks if a number is prime
    assistant: First let me use the Write tool to write a function that checks if a number is prime
    assistant: I'm going to use the Write tool to write the following code:
    <code>
    function isPrime(n) {
      if (n <= 1) return false
      for (let i = 2; i * i <= n; i++) {
        if (n % i === 0) return false
      }
      return true
    }
    </code>
    <commentary>
    Since a significant piece of code was written and the task was completed, now use the code-reviewer agent to review the code
    </commentary>
    assistant: Now let me use the code-reviewer agent to review the code
    assistant: Uses the Task tool to launch the with the code-reviewer agent 
    </example>
    
    <example>
    user: "Hello"
    <commentary>
    Since the user is greeting, use the greeting-responder agent to respond with a friendly joke
    </commentary>
    assistant: "I'm going to use the Task tool to launch the with the greeting-responder agent"
    </example>

  TodoWrite: |
    Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.
    It also helps the user understand the progress of the task and overall progress of their requests.

    ## CRITICAL LOOP PREVENTION RULES
    
    **BEFORE calling TodoWrite, ALWAYS check:**
    1. Have I called TodoWrite with identical content in the last 2 calls?
    2. Am I only changing task status without new meaningful progress?
    3. Is this a simple task that doesn't actually need todo tracking?
    
    **If YES to any above: STOP. Do not call TodoWrite. Instead:**
    - For simple completions: Just complete the task and report results
    - For status updates: Only update if there's genuine new progress
    - For identical calls: The todo is already updated correctly

    ## When to Use This Tool
    Use this tool proactively in these scenarios:

    1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions
    2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations
    3. User explicitly requests todo list - When the user directly asks you to use the todo list
    4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)
    5. After receiving new instructions - Immediately capture user requirements as todos
    6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time
    7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation

    ## When NOT to Use This Tool

    Skip using this tool when:
    1. There is only a single, straightforward task
    2. The task is trivial and tracking it provides no organizational benefit
    3. The task can be completed in less than 3 trivial steps
    4. The task is purely conversational or informational

    **ADDITIONAL ANTI-PATTERNS (Loop Prevention):**
    - ❌ Simple code reviews or file analysis (just do the analysis and report)
    - ❌ Calling TodoWrite 3+ times with identical content
    - ❌ Creating todos after work is already finished
    - ❌ Status-only updates without meaningful progress

    NOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.

    ## Examples of When to Use the Todo List

    <example>
    User: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!
    Assistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.
    *Creates todo list with the following items:*
    1. Create dark mode toggle component in Settings page
    2. Add dark mode state management (context/store)
    3. Implement CSS-in-JS styles for dark theme
    4. Update existing components to support theme switching
    5. Run tests and build process, addressing any failures or errors that occur
    *Begins working on the first task*

    <reasoning>
    The assistant used the todo list because:
    1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes
    2. The user explicitly requested tests and build be run afterward
    3. The assistant inferred that tests and build need to pass by adding "Ensure tests and build succeed" as the final task
    </reasoning>
    </example>

    <example>
    User: Help me rename the function getCwd to getCurrentWorkingDirectory across my project
    Assistant: Let me first search through your codebase to find all occurrences of 'getCwd'.
    *Uses grep or search tools to locate all instances of getCwd in the codebase*
    Assistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.
    *Creates todo list with specific items for each file that needs updating*

    <reasoning>
    The assistant used the todo list because:
    1. First, the assistant searched to understand the scope of the task
    2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps
    3. The todo list helps ensure every instance is tracked and updated systematically
    4. This approach prevents missing any occurrences and maintains code consistency
    </reasoning>
    </example>

    <example>
    User: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.
    Assistant: I'll help implement these features. First, let's add all the features to the todo list.
    *Creates a todo list breaking down each feature into specific tasks based on the project architecture*
    Assistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.

    <reasoning>
    The assistant used the todo list because:
    1. The user provided multiple complex features to implement in a comma separated list
    2. The todo list helps organize these large features into manageable tasks
    3. This approach allows for tracking progress across the entire implementation
    </reasoning>
    </example>

    <example>
    User: Can you help optimize my React application? It's rendering slowly and has performance issues.
    Assistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.
    *Reviews component structure, render patterns, state management, and data fetching*
    Assistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.
    *Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*
    Let's start by implementing memoization for the expensive calculations in your ProductList component.

    <reasoning>
    The assistant used the todo list because:
    1. First, the assistant examined the codebase to identify specific performance issues
    2. Based on this analysis, it identified multiple optimization opportunities
    3. Performance optimization is a non-trivial task requiring multiple steps
    4. The todo list helps methodically track improvements across different components
    5. This systematic approach ensures all performance bottlenecks are addressed
    </reasoning>
    </example>

    ## Examples of When NOT to Use the Todo List

    <example>
    User: How do I print 'Hello World' in Python?
    Assistant: In Python, you can print "Hello World" with this simple code:

    python
    print("Hello World")

    This will output the text "Hello World" to the console when executed.

    <reasoning>
    The assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.
    </reasoning>
    </example>

    <example>
    User: What does the git status command do?
    Assistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.

    <reasoning>
    The assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.
    </reasoning>
    </example>

    <example>
    User: Can you add a comment to the calculateTotal function to explain what it does?
    Assistant: Sure, let me add a comment to the calculateTotal function to explain what it does.
    * Uses the Edit tool to add a comment to the calculateTotal function *

    <reasoning>
    The assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.
    </reasoning>
    </example>

    <example>
    User: Run npm install for me and tell me what happens.
    Assistant: I'll run the npm install command for you.

    *Executes: npm install*

    The command completed successfully. Here's the output:
    [Output of npm install command]

    All dependencies have been installed according to your package.json file.

    <reasoning>
    The assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.
    </reasoning>
    </example>

    ## Task States and Management

    1. **Task States**: Use these states to track progress:
       - pending: Task not yet started
       - in_progress: Currently working on (limit to ONE task at a time)
       - completed: Task finished successfully

    2. **Task Management**:
       - Update task status in real-time as you work
       - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)
       - Only have ONE task in_progress at any time
       - Complete current tasks before starting new ones
       - Remove tasks that are no longer relevant from the list entirely

    3. **Task Completion Requirements**:
       - ONLY mark a task as completed when you have FULLY accomplished it
       - If you encounter errors, blockers, or cannot finish, keep the task as in_progress
       - When blocked, create a new task describing what needs to be resolved
       - Never mark a task as completed if:
         - Tests are failing
         - Implementation is partial
         - You encountered unresolved errors
         - You couldn't find necessary files or dependencies

    4. **Task Breakdown**:
       - Create specific, actionable items
       - Break complex tasks into smaller, manageable steps
       - Use clear, descriptive task names

    ## Loop Detection Recovery

    If you detect you've called TodoWrite repetitively with the same content:
    1. **STOP** calling TodoWrite immediately
    2. **Complete** the actual work instead of managing todos
    3. **Report** results directly to user

    When in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.

  Read: |
    Reads a file from the local filesystem. You can access any file directly by using this tool.
    Assume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.

    Usage:
    - The file_path parameter must be an absolute path, not a relative path
    - By default, it reads up to 2000 lines starting from the beginning of the file
    - You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters
    - Any lines longer than 2000 characters will be truncated
    - Results are returned using cat -n format, with line numbers starting at 1
    - You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.
    - You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/file.txt
    - If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.

  Grep: |
    A powerful search tool built on ripgrep

      Usage:
      - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.
      - Supports full regex syntax (e.g., "log.*Error", "function\\s+\\w+")
      - Filter files with glob parameter (e.g., "*.js", "**/*.tsx") or type parameter (e.g., "js", "py", "rust")
      - Output modes: "content" shows matching lines, "files_with_matches" shows only file paths (default), "count" shows match counts
      - Use Task tool for open-ended searches requiring multiple rounds
      - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)
      - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`
      
      IMPORTANT: The 'path' parameter is for DIRECTORIES to search within, NOT specific files.
      - CORRECT: path="/Users/seven/projects/myapp" (searches all files in directory)
      - CORRECT: path="src/main/java" (searches all files in subdirectory)  
      - INCORRECT: path="/path/to/specific/file.java" (will find 0 results)
      - To search within a specific file, use Read tool instead of Grep with a file path.